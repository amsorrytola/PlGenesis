{"version":3,"sources":["../src/index.ts","../src/plugins/web3/actions/mintRequest.ts","../src/plugins/web3/ethereum.ts","../src/plugins/web3/nearWallet.ts","../src/plugins/web3/index.ts"],"sourcesContent":["import {\n  logger,\n  type Character,\n  type IAgentRuntime,\n  type Project,\n  type ProjectAgent,\n} from '@elizaos/core';\nimport starterPlugin from './plugin.ts';\nimport { web3Plugin } from './plugins/web3/index.ts';\n\n/**\n * Represents the default character (Eliza) with her specific attributes and behaviors.\n * Eliza responds to a wide range of messages, is helpful and conversational.\n * She interacts with users in a concise, direct, and helpful manner, using humor and empathy effectively.\n * Eliza's responses are geared towards providing assistance on various topics while maintaining a friendly demeanor.\n */\nexport const character: Character = {\n  name: 'NEARAI',\n  plugins: [\n    '@elizaos/plugin-sql',\n    ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []),\n    ...(!process.env.OPENAI_API_KEY ? ['@elizaos/plugin-local-ai'] : []),\n    ...(process.env.DISCORD_API_TOKEN ? ['@elizaos/plugin-discord'] : []),\n    ...(process.env.TWITTER_API_KEY &&\n    process.env.TWITTER_API_SECRET_KEY &&\n    process.env.TWITTER_ACCESS_TOKEN &&\n    process.env.TWITTER_ACCESS_TOKEN_SECRET\n      ? ['@elizaos/plugin-twitter']\n      : []),\n    ...(process.env.TELEGRAM_BOT_TOKEN ? ['@elizaos/plugin-telegram'] : []),\n    ...(!process.env.IGNORE_BOOTSTRAP ? ['@elizaos/plugin-bootstrap'] : []),\n  ],\n  settings: {\n    secrets: {},\n  },\n  system:\n    'Respond to all messages in a helpful, conversational manner. Provide assistance on a wide range of topics, using knowledge when needed. Be concise but thorough, friendly but professional. Use humor when appropriate and be empathetic to user needs. Provide valuable information and insights when questions are asked.',\n  bio: [\n    'Engages with all types of questions and conversations',\n    'Provides helpful, concise responses',\n    'Uses knowledge resources effectively when needed',\n    'Balances brevity with completeness',\n    'Uses humor and empathy appropriately',\n    'Adapts tone to match the conversation context',\n    'Offers assistance proactively',\n    'Communicates clearly and directly',\n  ],\n  topics: [\n    'general knowledge and information',\n    'problem solving and troubleshooting',\n    'technology and software',\n    'community building and management',\n    'business and productivity',\n    'creativity and innovation',\n    'personal development',\n    'communication and collaboration',\n    'education and learning',\n    'entertainment and media',\n  ],\n  messageExamples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'This user keeps derailing technical discussions with personal problems.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'DM them. Sounds like they need to talk about something else.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I tried, they just keep bringing drama back to the main channel.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"Send them my way. I've got time today.\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"I can't handle being a mod anymore. It's affecting my mental health.\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'Drop the channels. You come first.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"But who's going to handle everything?\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"We will. Take the break. Come back when you're ready.\",\n        },\n      },\n    ],\n  ],\n  style: {\n    all: [\n      'Keep responses concise but informative',\n      'Use clear and direct language',\n      'Be engaging and conversational',\n      'Use humor when appropriate',\n      'Be empathetic and understanding',\n      'Provide helpful information',\n      'Be encouraging and positive',\n      'Adapt tone to the conversation',\n      'Use knowledge resources when needed',\n      'Respond to all types of questions',\n    ],\n    chat: [\n      'Be conversational and natural',\n      'Engage with the topic at hand',\n      'Be helpful and informative',\n      'Show personality and warmth',\n    ],\n  },\n};\n\nconst initCharacter = ({ runtime }: { runtime: IAgentRuntime }) => {\n  logger.info('Initializing character');\n  logger.info('Name: ', character.name);\n};\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => await initCharacter({ runtime }),\n   plugins: [web3Plugin], \n};\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport default project;\n","import {\n    type Action,\n    AgentRuntime,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelType,\n    parseKeyValueXml,\n  } from '@elizaos/core';\n  import {\n    parseEther,\n    encodeFunctionData,\n    Chain,\n  } from 'viem';\n\n  import ethereum from \"../ethereum.ts\"\n\n  \n  const Template = `Extract the stock name, provide its official stock symbol, number of stock user wants to buy, extract the ETH token amount\n     user wants to use for the purchase, from the user's message. In <spendAmount> keep only amount , no token symbol.\n  \n  User message: \"{{userMessage}}\"\n  \n  Return in this format:\n  <response>\n  <stockSym>STOCK_SYMBOL</stockSym>\n  <stockNum>STOCK_NUM</stockNum>\n  <spendAmount>amount_AVAX</spendAmount>\n  </response>\n  \n  If no stock is mentioned or it's not a stock buying inquiry, return:\n  <response>\n  <error>Not a stock buy request</error>\n  </response>`;\n  \n  \n  export const MintRequestAction: Action = {\n    name: 'Buy_Stock',\n    similes: ['MINT_REQUEST', 'SEND_STOCK_REQUEST'],\n    description: 'Buy any stock using native token.',\n  \n    validate: async (_runtime, _message, _state) => true,\n  \n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State | undefined,\n      _options: any,\n      callback?: HandlerCallback\n    ) => {\n      if (!state) {\n        state = (await runtime.composeState(message)) as State;\n      }\n  \n      const prompt = Template.replace('{{userMessage}}', message.content.text || '');\n  \n      const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        prompt\n      })\n  \n  \n      console.log(\"response\",response)\n  \n      const parsed = parseKeyValueXml(response);\n  \n        if (!parsed || parsed.error || !parsed.stockSym || !parsed.stockNum || !parsed.spendAmount) {\n          return { text: '', data: {}, values: {} };\n        }\n  \n        const stockSym = parsed.stockSym.toUpperCase()\n        const stockNum = parsed.stockNum\n        const spendAmount = parsed.spendAmount\n\n        try {\n            let tx:any;\n            (async () => {\n              const address = '0xF07CD4F8DFBfE342136470f3355f74909F48b4A7';\n              tx =  await ethereum.call({\n                      from: address,\n                      to :'0x9efdDF960D129fC2FBEc504930D6D3494E7Ca5Bb',\n                      method : 'sendMintRequest',\n                      args : { uint256: 1, string: 'HCTI' },\n                      amount : spendAmount,\n                      ret : ['bytes32']\n                });\n              })();\n  \n   const resultText = `Sent mint request for ${stockSym} x${stockNum} on sepolia. Transaction hash: ${tx}`;\n  \n        if (callback) {\n          callback({\n            text: resultText,\n            content: { tx, stockSym, stockNum }\n          });\n        }\n  \n        return {\n          text: resultText,\n          content: { tx, stockSym, stockNum }\n        };\n      } catch (err) {\n        elizaLogger.error('Error in sendMintRequestAction:', err);\n        if (callback) {\n          callback({ text: `Transaction failed: ${err.message}` });\n        }\n      }\n    }\n}","import { readFileSync } from 'fs';\nimport { ethers } from 'ethers';\nimport BN from 'bn.js';\nimport { sign } from './nearWallet.ts';\nconst { MPC_PATH, NEAR_PROXY_CONTRACT } = process.env;\n  \n\n  const ethereum = {\n    name: 'Sepolia',\n    chainId: 11155111,\n    currency: 'ETH',\n    explorer: 'https://sepolia.etherscan.io',\n    gasLimit: 21000,\n\n    getGasPrice: async () => {\n    const provider = getSepoliaProvider();\n    const feeData = await provider.getFeeData();\n    return feeData.gasPrice.toString();\n  },\n\n    getBalance: async ({ address }) => await getSepoliaProvider().getBalance(address),\n\n    send: async ({\n        from: address,\n        to = '0x525521d79134822a342d330bd91DA67976569aF1',\n        amount = '0.001',\n    }) => {\n        if (!address) return console.log('must provide a sending address');\n        const {\n            getGasPrice,\n            gasLimit,\n            chainId,\n            getBalance,\n            completeEthereumTx,\n            currency,\n        } = ethereum;\n\n        const balance = await getBalance({ address });\n        console.log('balance', ethers.utils.formatUnits(balance), currency);\n\n        const provider = getSepoliaProvider();\n        // get the nonce for the sender\n        const nonce = await provider.getTransactionCount(address);\n        const gasPrice = await getGasPrice();\n\n        // check sending value\n        const value = ethers.utils.hexlify(ethers.utils.parseUnits(amount));\n        if (value === '0x00') {\n            console.log('Amount is zero. Please try a non-zero amount.');\n        }\n\n        // check account has enough balance to cover value + gas spend\n        const overrideBalanceCheck = true;\n        if (\n            !overrideBalanceCheck &&\n            (!balance ||\n                new BN(balance.toString()).lt(\n                    new BN(ethers.utils.parseUnits(amount).toString()).add(\n                        new BN(gasPrice).mul(new BN(gasLimit.toString())),\n                    ),\n                ))\n        ) {\n            return console.log('insufficient funds');\n        }\n\n        console.log('sending', amount, currency, 'from', address, 'to', to);\n\n        const baseTx = {\n    to,\n    nonce: ethers.utils.hexlify(nonce),\n    data: '0x', // empty calldata, must be a hex string not []\n    value, // already hex\n    gasLimit: ethers.utils.hexlify(gasLimit),\n    gasPrice: ethers.utils.hexlify(ethers.BigNumber.from(gasPrice)),\n    chainId,\n};\n\n        await completeEthereumTx({ address, baseTx });\n    },\n\n    deployContract: async ({ from: address, path = './contracts/nft.bin' }) => {\n        const { explorer, getGasPrice, completeEthereumTx, chainId } = ethereum;\n\n        const bytes = readFileSync(path, 'utf8');\n\n        const provider = getSepoliaProvider();\n        const nonce = await provider.getTransactionCount(address);\n\n        const contractAddress = ethers.utils.getContractAddress({\n            from: address,\n            nonce,\n        });\n\n        console.log(\n            'deploying bytes',\n            bytes.length,\n            'to address',\n            contractAddress,\n        );\n\n\n        const gasPrice = await getGasPrice();\n\n        const baseTx = {\n            nonce,\n            data: bytes,\n            value: 0,\n            gasLimit: 6000000, // 6m gas\n            gasPrice,\n            chainId,\n        };\n\n        await completeEthereumTx({ address, baseTx });\n\n        console.log('contract deployed successfully to address:');\n        console.log(contractAddress);\n        console.log('explorer link', `${explorer}/address/${contractAddress}`);\n    },\n\n    view: async ({\n        to = '0x09a1a4e1cfca73c2e4f6599a7e6b98708fda2664',\n        method = 'balanceOf',\n        args = { address: '0x525521d79134822a342d330bd91da67976569af1' },\n        ret = ['uint256'],\n    }) => {\n        const provider = getSepoliaProvider();\n        console.log('view contract', to);\n        const { data, iface } = encodeData({ method, args, ret });\n        const res = await provider.call({\n            to,\n            data,\n        });\n        const decoded = iface.decodeFunctionResult(method, res);\n        console.log('view result', decoded.toString());\n    },\n\n    call: async ({\n        from: address,\n        to = '0x09a1a4e1cfca73c2e4f6599a7e6b98708fda2664',\n        method = 'mint',\n        args = {},\n        amount = '0.01',\n        ret = [],\n    }) => {\n        const { getGasPrice, completeEthereumTx, chainId } = ethereum;\n\n        const provider = getSepoliaProvider();\n        console.log('call contract', to);\n        const { data } = encodeData({ method, args, ret });\n\n\n        const gasPrice = await getGasPrice();\n        const nonce = await provider.getTransactionCount(address);\n        const baseTx = {\n            to,\n            nonce: ethers.utils.hexlify(nonce),\n            data,\n            value: ethers.utils.hexlify(ethers.utils.parseUnits(amount)),\n            gasLimit: 1000000, // 1m\n            gasPrice: ethers.utils.hexlify(ethers.BigNumber.from(gasPrice)),\n            chainId,\n        };\n\n       const tx =  await completeEthereumTx({ address, baseTx });\n\n       return tx;\n    },\n\n    completeEthereumTx: async ({ address, baseTx }) => {\n        const { chainId, getBalance, explorer, currency } = ethereum;\n\n        // create hash of unsigned TX to sign -> payload\n        const unsignedTx = ethers.utils.serializeTransaction(baseTx);\n        const txHash = ethers.utils.keccak256(unsignedTx);\n        const payload = Object.values(ethers.utils.arrayify(txHash));\n\n        // get signature from MPC contract\n        let sig:any;\n        if (NEAR_PROXY_CONTRACT === 'true') {\n            sig = await sign(unsignedTx, MPC_PATH);\n        } else {\n            sig = await sign(payload, MPC_PATH);\n        }\n        if (!sig) return;\n\n        sig.r = '0x' + sig.r.toString('hex');\n        sig.s = '0x' + sig.s.toString('hex');\n        // console.log('sig', sig);\n\n        // check 2 values for v (y-parity) and recover the same ethereum address from the generateAddress call (in app.ts)\n        let addressRecovered = false;\n        for (let v = 0; v < 2; v++) {\n            sig.v = v + chainId * 2 + 35;\n            const recoveredAddress = ethers.utils.recoverAddress(payload, sig);\n            if (recoveredAddress.toLowerCase() === address.toLowerCase()) {\n                addressRecovered = true;\n                break;\n            }\n        }\n        if (!addressRecovered) {\n            return console.log(\n                'signature failed to recover correct sending address',\n            );\n        }\n\n        // broadcast TX - signature now has correct { r, s, v }\n        try {\n            const hash = await getSepoliaProvider().send(\n                'eth_sendRawTransaction',\n                [ethers.utils.serializeTransaction(baseTx, sig)],\n            );\n            console.log('tx hash', hash);\n            console.log('explorer link', `${explorer}/tx/${hash}`);\n\n            return hash;\n            console.log('fetching updated balance in 60s...');\n            setTimeout(async () => {\n                const balance = await getBalance({ address });\n                console.log(\n                    'balance',\n                    ethers.utils.formatUnits(balance),\n                    currency,\n                );\n            }, 60000);\n        } catch (e) {\n            if (/nonce too low/gi.test(JSON.stringify(e))) {\n                return console.log('tx has been tried');\n            }\n            if (/gas too low|underpriced/gi.test(JSON.stringify(e))) {\n                return console.log(e);\n            }\n            console.log(e);\n        }\n    },\n};\n\nconst encodeData = ({ method, args, ret }) => {\n    const abi = [\n        `function ${method}(${Object.keys(args).join(',')}) returns (${ret.join(\n            ',',\n        )})`,\n    ];\n    const iface = new ethers.utils.Interface(abi);\n    const allArgs = [];\n    const argValues = Object.values(args);\n    for (let i = 0; i < argValues.length; i++) {\n        allArgs.push(argValues[i]);\n    }\n\n    console.log(abi[0], 'with args', allArgs);\n\n    return {\n        iface,\n        data: iface.encodeFunctionData(method, allArgs),\n    };\n};\n\nconst getSepoliaProvider = () => {\n    return new ethers.providers.JsonRpcProvider(\n        'https://ethereum-sepolia.publicnode.com',\n    );\n};\n\nexport default ethereum;","import * as nearAPI from 'near-api-js';\nimport { BN } from 'bn.js';\nimport dotenv from 'dotenv';\ndotenv.config();\nconst {\n    Near,\n    Account,\n    keyStores,\n    KeyPair,\n    transactions: { functionCall },\n} = nearAPI;\nconst {\n    MPC_CONTRACT_ID,\n    NEAR_ACCOUNT_ID,\n    NEAR_PRIVATE_KEY,\n    NEAR_PROXY_ACCOUNT,\n    NEAR_PROXY_CONTRACT,\n    NEAR_PROXY_ACCOUNT_ID,\n    NEAR_PROXY_PRIVATE_KEY,\n} = process.env;\n\nconst accountId =NEAR_ACCOUNT_ID;\nconst contractId = MPC_CONTRACT_ID;\nconst privateKey = NEAR_PRIVATE_KEY;\nconst keyStore = new keyStores.InMemoryKeyStore();\nkeyStore.setKey('testnet', accountId, KeyPair.fromString(`ed25519:${privateKey}`));\n\nconsole.log('Near Chain Signature (NCS) call details:');\nconsole.log('Near accountId', accountId);\nconsole.log('NCS contractId', contractId);\n\nconst config = {\n    networkId: 'testnet',\n    keyStore: keyStore,\n    nodeUrl: 'https://rpc.testnet.near.org',\n    walletUrl: 'https://testnet.mynearwallet.com/',\n    helperUrl: 'https://helper.testnet.near.org',\n    explorerUrl: 'https://testnet.nearblocks.io',\n};\nexport const near = new Near(config);\nexport const account = new Account(near.connection, accountId);\n\nexport async function sign(payload:any, path:any) {\n    const args = {\n        request: {\n            payload,\n            path,\n            key_version: 0,\n        },\n    };\n    let attachedDeposit = nearAPI.utils.format.parseNearAmount('1');\n\n    console.log(\n        'sign payload',\n        payload.length > 200 ? payload.length : payload.toString(),\n    );\n    console.log('with path', path);\n    console.log('this may take approx. 30 seconds to complete');\n    console.log('argument to sign: ',args);\n\n    let res:nearAPI.providers.FinalExecutionOutcome;\n    try {\n        res = await account.functionCall({\n            contractId,\n            methodName: 'sign',\n            args: args,\n            gas: BigInt('300000000000000'),\n            attachedDeposit: BigInt(attachedDeposit),\n        });\n    } catch (e) {\n        throw new Error(`error signing ${JSON.stringify(e)}`);\n    }\n\n    // parse result into signature values we need r, s but we don't need first 2 bytes of r (y-parity)\n    if ('SuccessValue' in (res.status as any)) {\n        const successValue = (res.status as any).SuccessValue;\n        const decodedValue = Buffer.from(successValue, 'base64').toString();\n        console.log('decoded value: ', decodedValue);\n        const { big_r, s: S, recovery_id } = JSON.parse(decodedValue);\n        const r = Buffer.from(big_r.affine_point.substring(2), 'hex');\n        const s = Buffer.from(S.scalar, 'hex');\n\n        return {\n            r,\n            s,\n            v: recovery_id,\n        };\n    } else {\n        throw new Error(`error signing ${JSON.stringify(res)}`);\n    }\n}","import { Plugin } from \"@elizaos/core\";\nimport { MintRequestAction } from \"./actions/mintRequest.ts\";\n\nexport const web3Plugin: Plugin = {\n  name: \"web3\",\n  description: \"Web3 plugin for interacting with EVM chains\",\n  actions: [MintRequestAction],\n  providers: [],\n};"],"mappings":"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","names":["NEAR_PROXY_CONTRACT"]}